/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PaperImport } from './routes/paper'
import { Route as BannerImport } from './routes/banner'
import { Route as AlertImport } from './routes/alert'
import { Route as AccordionImport } from './routes/accordion'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const PaperRoute = PaperImport.update({
  id: '/paper',
  path: '/paper',
  getParentRoute: () => rootRoute,
} as any)

const BannerRoute = BannerImport.update({
  id: '/banner',
  path: '/banner',
  getParentRoute: () => rootRoute,
} as any)

const AlertRoute = AlertImport.update({
  id: '/alert',
  path: '/alert',
  getParentRoute: () => rootRoute,
} as any)

const AccordionRoute = AccordionImport.update({
  id: '/accordion',
  path: '/accordion',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/accordion': {
      id: '/accordion'
      path: '/accordion'
      fullPath: '/accordion'
      preLoaderRoute: typeof AccordionImport
      parentRoute: typeof rootRoute
    }
    '/alert': {
      id: '/alert'
      path: '/alert'
      fullPath: '/alert'
      preLoaderRoute: typeof AlertImport
      parentRoute: typeof rootRoute
    }
    '/banner': {
      id: '/banner'
      path: '/banner'
      fullPath: '/banner'
      preLoaderRoute: typeof BannerImport
      parentRoute: typeof rootRoute
    }
    '/paper': {
      id: '/paper'
      path: '/paper'
      fullPath: '/paper'
      preLoaderRoute: typeof PaperImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/accordion': typeof AccordionRoute
  '/alert': typeof AlertRoute
  '/banner': typeof BannerRoute
  '/paper': typeof PaperRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/accordion': typeof AccordionRoute
  '/alert': typeof AlertRoute
  '/banner': typeof BannerRoute
  '/paper': typeof PaperRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/accordion': typeof AccordionRoute
  '/alert': typeof AlertRoute
  '/banner': typeof BannerRoute
  '/paper': typeof PaperRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/accordion' | '/alert' | '/banner' | '/paper'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/accordion' | '/alert' | '/banner' | '/paper'
  id: '__root__' | '/' | '/accordion' | '/alert' | '/banner' | '/paper'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AccordionRoute: typeof AccordionRoute
  AlertRoute: typeof AlertRoute
  BannerRoute: typeof BannerRoute
  PaperRoute: typeof PaperRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AccordionRoute: AccordionRoute,
  AlertRoute: AlertRoute,
  BannerRoute: BannerRoute,
  PaperRoute: PaperRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/accordion",
        "/alert",
        "/banner",
        "/paper"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/accordion": {
      "filePath": "accordion.tsx"
    },
    "/alert": {
      "filePath": "alert.tsx"
    },
    "/banner": {
      "filePath": "banner.tsx"
    },
    "/paper": {
      "filePath": "paper.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
